version: '3'
  api:
    build: .
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      APP_REDIS_HOST: redis
      APP_REDIS_PORT: 6379
      NODE_ENV: development
    ports:
      - 8082:8082
      - 9229:9229
  #    command: npm start
  redis:
    image: "redis:alpine"
    expose:
      - 6379
services:
  node:
    build: .
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www
    ports:
      - 8082:8082
      - 9229:9229
    volumes:
      - .:/opt/node_app/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      - ./package.json:/opt/node_app/package.json
      - ./package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules
    environment:
      - NODE_ENV=development
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
      - MONGO_DATABASE_NAME=example-database
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      disable: true

volumes:
  notused: